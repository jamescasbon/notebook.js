{
  "title": "Tutorial: Become a web citizen",
  "language": "Javascript",
  "state": "running",
  "pendingSaves": false,
  "engineUrl": "browser://",
  "id": "6b5d5874-a5ea-8632-a0e9-2adbf152d96d",
  "cells": [
    {
      "input": "Becoming a Web Citizen\n======================\n\nWe are running this code inside your browser, and since no browser is an island we can consume resources from the web.  However, the web worker is subject to same origin access policies, so we must ensure the servers we are accessing support CORS.\n\n\n\nLoading some data \n-----------------\n\nIn this example, we will load data from [ScraperWiki](https://scraperwiki.com/) and in particular my scrape of [SexyMP](https://scraperwiki.com/scrapers/sexymp/) (don't ask!).\n\nWe first load the data and convert from JSON:",
      "type": "markdown",
      "inputFold": true,
      "output": "<div class=\"raw\"><h1 id=\"becomingawebcitizen\">Becoming a Web Citizen</h1>\n\n<p>We are running this code inside your browser, and since no browser is an island we can consume resources from the web.  However, the web worker is subject to same origin access policies, so we must ensure the servers we are accessing support CORS.</p>\n\n<h2 id=\"loadingsomedata\">Loading some data </h2>\n\n<p>In this example, we will load data from <a href=\"https://scraperwiki.com/\">ScraperWiki</a> and in particular my scrape of <a href=\"https://scraperwiki.com/scrapers/sexymp/\">SexyMP</a> (don't ask!).</p>\n\n<p>We first load the data and convert from JSON:</p></div>",
      "position": 32768,
      "error": null,
      "state": null,
      "id": "8cbf18ce-79c5-ecf5-0bf0-10a1e57dd229"
    },
    {
      "input": "uri = 'https://api.scraperwiki.com/api/1.0/datastore/sqlite?\\\nformat=jsondict&name=sexymp&query=select%20*%20from%20%60swdata%60%20'\n\nreq = new XMLHttpRequest();\nreq.open('GET', uri, false);\nreq.send(null);\ndata = JSON.parse(req.responseText);\n\nprint('loaded ' + data.length + ' records');",
      "type": "code",
      "inputFold": false,
      "output": "<div class=\"print\">loaded 648 records</div><div class=\"print\">-</div>",
      "position": 65536,
      "error": null,
      "state": "dirty",
      "id": "389b414a-95e9-c8f7-168f-6d37574c1e47"
    },
    {
      "input": "Inspecting the data \n-------------------\n\nWe have now loaded the data, so let's look at an example record:",
      "type": "markdown",
      "inputFold": true,
      "output": "<div class=\"raw\"><h2 id=\"inspectingthedata\">Inspecting the data </h2>\n\n<p>We have now loaded the data, so let's look at an example record:</p></div>",
      "position": 131072,
      "error": null,
      "state": null,
      "id": "dfeb5bf6-04f9-0afe-20b8-3b4206d81373"
    },
    {
      "input": "print ('<h3>Example data point</h3>');\nfor (var p in data[0]) { \n    print(p + ': ' + data[0][p])\n}",
      "type": "code",
      "inputFold": false,
      "output": "<div class=\"print\"><h3>Example data point</h3></div><div class=\"print\">won: 2680</div><div class=\"print\">lost: 787</div><div class=\"print\">rank: 1</div><div class=\"print\">score: 1816</div><div class=\"print\">party: Labour Co-operative</div><div class=\"print\">constituency: Islwyn</div><div class=\"print\">name: Chris Evans</div><div class=\"print\">-</div>",
      "position": 196608,
      "error": null,
      "state": "dirty",
      "id": "5754f2b9-228a-ed84-f67e-5d0ee1a91964"
    },
    {
      "input": "SexyMP is a hot-or-not style pairwise comparison, so you can see here that [Chris Evans](http://www.theyworkforyou.com/mp/chris_evans/islwyn) was number one when we ran the scrape,  having won 2680 and lost 787 comparisons. \n\nWe have a list of objects as above, so we can use underscore.js to perform some simple queries:",
      "type": "markdown",
      "inputFold": true,
      "output": "<div class=\"raw\"><p>SexyMP is a hot-or-not style pairwise comparison, so you can see here that <a href=\"http://www.theyworkforyou.com/mp/chris_evans/islwyn\">Chris Evans</a> was number one when we ran the scrape,  having won 2680 and lost 787 comparisons. </p>\n\n<p>We have a list of objects as above, so we can use underscore.js to perform some simple queries:</p></div>",
      "position": 262144,
      "error": null,
      "state": null,
      "id": "7c4c9aa8-33b8-f5b5-2fee-4c0263d7865e"
    },
    {
      "input": "tories = _.filter(data, function(x) {return x.party === 'Conservative'});\nlibdem = _.filter(data, function(x) {return x.party == 'Liberal Democrat'});\nlabour = _.filter(data, function(x) {return x.party == 'Labour'});\n\nshowTopFive = function(x) { \n    var top = x.slice(0,5);\n    print(_.pluck(top, 'name'))\n    print(_.pluck(top, 'rank'))\n}\n\nprint('<h3>top five tories:</h3>');\nshowTopFive(tories);\n\nprint('<br/><h3>top five labour:</h3>');\nshowTopFive(labour);\n\nprint('</br><h3>top five libdems:</h3>');\nshowTopFive(libdem);",
      "type": "code",
      "inputFold": false,
      "output": "<div class=\"print\"><h3>top five tories:</h3></div><div class=\"print\">Steve Brine,Zac Goldsmith,Richard Drax,Tobias Ellwood,Edward Vaisey</div><div class=\"print\">6,7,9,12,21</div><div class=\"print\"><br/><h3>top five labour:</h3></div><div class=\"print\">Stella Creasy,Jamie Reed,Caroline Flint,Bridget Phillipson,Catherin McKinnell</div><div class=\"print\">2,4,5,8,10</div><div class=\"print\"></br><h3>top five libdems:</h3></div><div class=\"print\">Duncan Hames,Lynne Featherstone,David Laws,Martin Horwood,Sarah Teather</div><div class=\"print\">23,71,80,84,91</div><div class=\"print\">-</div>",
      "position": 327680,
      "error": null,
      "state": "dirty",
      "id": "2c6412c0-78f8-750c-125f-bd312b1848dc"
    },
    {
      "input": "Plotting the data \n-----------------\n\nIt looks like the Labour party has the pick of the main three parties, with the top five from the party in the top ten overall.  How about computing the averages and plotting?\n\nWe have to normalise the scores to [0,100] for use with the google chart API.",
      "type": "markdown",
      "inputFold": true,
      "output": "<div class=\"raw\"><h2 id=\"plottingthedata\">Plotting the data </h2>\n\n<p>It looks like the Labour party has the pick of the main three parties, with the top five from the party in the top ten overall.  How about computing the averages and plotting?</p>\n\n<p>We have to normalise the scores to [0,100] for use with the google chart API.</p></div>",
      "position": 393216,
      "error": null,
      "state": null,
      "id": "7d399901-783c-356c-8f28-79fb995606d9"
    },
    {
      "input": "avg_score = function(x) {1\n    var scores = _.pluck(x, 'score')\n    var sum = _.reduce(scores, function(memo, num){ return memo + num; }, 0);\n    return sum / x.length\n}\n\navgs = [avg_score(tories), avg_score(labour), avg_score(libdem) ];\nmax_score = _.max(avgs);\navgs = _.map(avgs, function(x) { return 100 * x / max_score });\n\nurl = 'http://chart.googleapis.com/chart?cht=bvs&chs=400x300&chco=4D89F9|FF0000\\\n|FBEC5D&chxl=0:|Tory|Labour|LibDem&chxt=x,y&chbh=50&chd=t:' + avgs;\n\nprint('<h3>Average sexiness score by party</h2>' )\nprint('<img src=\"' + url + '\">')",
      "type": "code",
      "inputFold": false,
      "output": "<div class=\"print\"><h3>Average sexiness score by party</h2></div><div class=\"print\"><img src=\"http://chart.googleapis.com/chart?cht=bvs&chs=400x300&chco=4D89F9|FF0000|FBEC5D&chxl=0:|Tory|Labour|LibDem&chxt=x,y&chbh=50&chd=t:96.44088879424642,100.00000000000001,96.3289354043422\"></div><div class=\"print\">-</div>",
      "position": 458752,
      "error": null,
      "state": "dirty",
      "id": "2db2c860-7fe5-500a-9263-e23cef69312d"
    }
  ]
}
