{"title":"Tutorial: understanding the engine","id":"4841ecc7-c2d3-7e10-2afb-0deb15b9f28a","cells":[{"input":"The notebook.js engine\n----------------------\n\nAt the heart of notebook.js is the _engine_.  The engine is a code interpreter.  The engine for this notebook is a javascript engine inside the browser.  You can use the __print__ function to produce output from the browser:","type":"markdown","inputFold":true,"output":"<div class=\"raw\"><h2 id=\"thenotebookjsengine\">The notebook.js engine</h2>\n\n<p>At the heart of notebook.js is the <em>engine</em>.  The engine is a code interpreter.  The engine for this notebook is a javascript engine inside the browser.  You can use the <strong>print</strong> function to produce output from the browser:</p></div>","position":null,"error":null,"state":null,"id":"bf9bcddc-fb9f-fcce-3b80-742db1822b05"},{"input":"a = 1;\nprint('a is ' + a);\na = a * 100;\nprint('a is now ' + a);","type":"javascript","inputFold":false,"output":"<div class=\"print\">a is 1</div><div class=\"print\">a is now 100</div><div class=\"print\">-</div>","position":32768,"error":null,"state":null,"id":"10f2d4c5-2df2-946f-79d9-48550429e6b4"},{"input":"The engine maintains state between cell evaluation, allowing you to develop the code throughout the notebook.  So I can refer to **a** again:","type":"markdown","inputFold":true,"output":"<div class=\"raw\"><p>The engine maintains state between cell evaluation, allowing you to develop the code throughout the notebook.  So I can refer to <strong>a</strong> again:</p></div>","position":49152,"error":null,"state":null,"id":"b8c7f7eb-f481-becc-3129-651124c46091"},{"input":"print('what is a now? ' + a);","type":"javascript","inputFold":false,"output":"<div class=\"print\">what is a now? 100</div><div class=\"print\">-</div>","position":57344,"error":null,"state":null,"id":"f2d25ba5-8fdc-a52a-bfe5-55b304f72ee4"},{"input":"This is a web notebook, so you can print html the notebook and it will be rendered.  For example, we can print different sizes of heading:","type":"markdown","inputFold":true,"output":"<div class=\"raw\"><p>This is a web notebook, so you can print html the notebook and it will be rendered.  For example, we can print different sizes of heading:</p></div>","position":61440,"error":null,"state":null,"id":"d553b369-cde5-f803-a6a5-54a72140f697"},{"input":"for (n=1; n<4; n++) { \n    print('<h' + n + '>Heading</h' + n + '>');\n}","type":"javascript","inputFold":false,"output":"<div class=\"print\"><h1>Heading</h1></div><div class=\"print\"><h2>Heading</h2></div><div class=\"print\"><h3>Heading</h3></div><div class=\"print\">-</div>","position":65536,"error":null,"state":null,"id":"cdcde763-ade4-1d3b-dbbd-8a4a1798b32b"},{"input":"The engine context \n------------------\n\nThe engine is running as a web worker.  It already has underscore.js avaliable, but you can call **importScripts** to use other libraries such as [sylvester.js](http//www.google.com).  Sylvester.js is a vector library, and we can use it to compute the dot product of two vectors:","type":"markdown","inputFold":true,"output":"<div class=\"raw\"><h2 id=\"theenginecontext\">The engine context </h2>\n\n<p>The engine is running as a web worker.  It already has underscore.js avaliable, but you can call <strong>importScripts</strong> to use other libraries such as <a href=\"http//www.google.com\">sylvester.js</a>.  Sylvester.js is a vector library, and we can use it to compute the dot product of two vectors:</p></div>","position":131072,"error":null,"state":null,"id":"048c5ffa-d7b1-97c2-8d32-6c265a179813"},{"input":"importScripts('/ext/sylvester.js')\nvar V1 = $V([3,4,5]);\nvar V2 = $V([9,-3,0]);\nV1.dot(V2);","type":"javascript","inputFold":false,"output":"<div class=\"print\">15</div>","position":196608,"error":null,"state":null,"id":"cc929796-4c66-69c3-f0eb-baf62f11432a"},{"input":"Interrupting the engine\n-----------------------\n\nSometimes, the engine may not finish what you ask it to do.  In the following cell we have code that will run forever.  Try evaluating it and you will see a spinning wheel in the right hand margin.  This shows that the cell is evaluating.  You can click that spinning wheel to interrupt the evaluation.  Try evaluating the cell below and then interrupting the engine:","type":"markdown","inputFold":true,"output":"<div class=\"raw\"><h2 id=\"interruptingtheengine\">Interrupting the engine</h2>\n\n<p>Sometimes, the engine may not finish what you ask it to do.  In the following cell we have code that will run forever.  Try evaluating it and you will see a spinning wheel in the right hand margin.  This shows that the cell is evaluating.  You can click that spinning wheel to interrupt the evaluation.  Try evaluating the cell below and then interrupting the engine:</p></div>","position":262144,"error":null,"state":null,"id":"ff9ed44f-58fc-edb7-4091-d5d921f5c947"},{"input":"print('start');\nwhile (true) { };\nprint('end');","type":"javascript","inputFold":false,"output":"<div class=\"print\">start</div><div class=\"error\">Interrupted</div>","position":327680,"error":null,"state":null,"id":"5ed0ef05-44cc-8d81-6838-aad32df4746e"}]}